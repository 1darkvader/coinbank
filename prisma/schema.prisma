// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  transactions  Transaction[]
  cards         CryptoCard[]
  settings      UserSettings?
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Portfolio {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  name        String
  totalValue  Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets      PortfolioAsset[]
}

model PortfolioAsset {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  portfolioId String    @db.ObjectId
  symbol      String
  name        String
  amount      Float
  price       Float
  value       Float
  allocation  Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  type        String   // 'buy', 'sell', 'send', 'receive', 'stake', 'unstake'
  symbol      String
  amount      Float
  price       Float
  fee         Float
  status      String   @default("pending") // 'pending', 'completed', 'failed'
  hash        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CryptoCard {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  cardType      String   // 'physical', 'virtual'
  lastFour      String
  expiryDate    String
  status        String   @default("active") // 'active', 'locked', 'frozen'
  spendingLimit Float    @default(5000)
  monthlySpent  Float    @default(0)
  rewards       Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                    String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                String  @unique @db.ObjectId
  twoFactorEnabled      Boolean @default(false)
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  tradingNotifications  Boolean @default(true)
  securityAlerts        Boolean @default(true)
  theme                 String  @default("dark")
  language              String  @default("en")
  currency              String  @default("USD")
  timezone              String  @default("UTC")

  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
